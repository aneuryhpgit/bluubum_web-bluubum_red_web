"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/

"""

import logging


import os
os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = 'credentials/credential.json'

import google.auth

from pathlib import Path
import environ
from google.oauth2 import service_account

import dj_database_url


env = environ.Env(
    # set casting, default value
    DEBUG=(bool, False)
)
environ.Env.read_env()

ENVIRONMENT = env

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
#SECRET_KEY = os.environ.get('SECRET_KEY')
SECRET_KEY = os.environ.get('SECRET_KEY', default='your secret key')

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = True

#DEBUG = 'RENDER' not in os.environ


ALLOWED_HOSTS = []
#'bluubum-5nyd.onrender.com', 'www.bluubum-5nyd.onrender.com'


RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)

   # 'www.bluubum-5nyd.onrender.com',
   # '.bluubum-5nyd.onrender.com',
   # 'bluubum-5nyd.onrender.com',


#PUBLIC_MEDIA_LOCATION = 'https://storage.googleapis.com/bluubum-storage-bucket/public/media'


#Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'home.apps.HomeConfig',
    'perfil_proveedor.apps.PerfilProveedorConfig',
    'config_inicial_prov.apps.ConfigInicialProvConfig',
    'prov_servis.apps.ProvServisConfig',
    
    'login_vendedor.apps.LoginVendedorConfig',
    'vend_config_inic.apps.VendConfigInicConfig',
    'vend_edict_config.apps.VendEdictConfigConfig',
    'dashboard_prov.apps.DashboardProvConfig',
    'vendedor_perfil.apps.VendedorPerfilConfig',
  
    'app_perfiles.apps.AppPerfilesConfig',
    'django.contrib.humanize',

]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'home.middleware.InvalidURLMiddleware',
]


ROOT_URLCONF = 'backend.urls'


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]



WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases


DATABASES = {
    'default': dj_database_url.parse(env('DATABASE_URL'))
}

DATABASES['default']["ATOMIC_REQUESTS"] = True


# Password validation
PASSWORD_HASHERS = [
    # https://docs.djangoproject.com/en/dev/topics/auth/passwords/#using-argon2-with-django
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
]

# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Santo_Domingo'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/


#STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

#STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


SESSION_COOKIE_SECURE = True
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_SECONDS = 31536000
SECURE_REDIRECT_EXEMPT = []
SECURE_SSL_REDIRECT = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


STATIC_URL = 'static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),

]
STATIC_ROOT = os.path.join(BASE_DIR, 'static_root')
# Configuración del resto de archivos estáticos y media


PUBLIC_MEDIA_LOCATION='media'
MEDIA_URL=f'https://storage.googleapis.com/bluubum-bucket-storage/{PUBLIC_MEDIA_LOCATION}/'
MEDIA_ROOT=os.path.join(BASE_DIR, 'media')

GS_BUCKET_NAME='bluubum-bucket-storage'
GS_AUTO_CREATE_BUCKET=True
GS_PROJECT_ID='ID_del_proyecto'  
GS_LOCATION='ubicacion_del_bucket'  
GS_FILE_OVERWRITE=False  

credentials=service_account.Credentials.from_service_account_file('credentials/credential.json')
DEFAULT_FILE_STORAGE='storages.backends.gcloud.GoogleCloudStorage'
GS_CREDENTIALS=credentials

# Obtén las credenciales predeterminadas de Google Cloud
credentials, _ = google.auth.default()


EMAIL_BACKEND = os.environ['EMAIL_BACKEND']
EMAIL_HOST = os.environ['EMAIL_HOST']
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
DEFAULT_FROM_EMAIL = 'no-reply@bluubum-api.onrender.com'
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']
EMAIL_PORT = os.environ['EMAIL_PORT']
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', False)


# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



'''
if not DEBUG:
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



    SESSION_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_REDIRECT_EXEMPT = []
    SECURE_SSL_REDIRECT = True
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    # django-ckeditor will not work with S3 through django-storages without this line in settings.py
  
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

    STATIC_URL = 'https://bluubum-storage-bucket.storage.googleapis.com/'
    STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'


    # Configuración del resto de archivos estáticos y media
    PUBLIC_MEDIA_LOCATION = 'media'
    MEDIA_URL = f'https://storage.googleapis.com/bluubum-storage-bucket/{PUBLIC_MEDIA_LOCATION}/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'

    # Configuración de almacenamiento en Google Cloud Storage
    GS_BUCKET_NAME = 'bluubum-storage-bucket'
    GS_AUTO_CREATE_BUCKET = True
    GS_CREDENTIALS_PATH = '/credentials/credential.json'
    GS_PROJECT_ID = 'ID_del_proyecto'  # Si no se proporciona, se tomará automáticamente del entorno
    GS_LOCATION = 'ubicacion_del_bucket'  # Si tu bucket está en una ubicación diferente a la predeterminada
    GS_FILE_OVERWRITE = False  # Para

    # Obtén las credenciales predeterminadas de Google Cloud
    credentials, _ = google.auth.default()
    GS_CREDENTIALS = GS_CREDENTIALS_PATH

else:
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static')
    ]



'''


BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'logs/registro_errores.log',  # Ruta y nombre del archivo de registro
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}


